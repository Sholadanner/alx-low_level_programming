!<arch>
0-isupper.o/    0           0     0     644     255       `
#include "main.h"

/**
 * _isupper - has an int data type
 *
 * Return: to be calculated
 *
 * @c: value for the alphabets
 */

int _isupper(int c)
{
        if (c >= 'A' && c <= 'Z')
                return (1);
        else
                return (0);
}

0-memset.o/     0           0     0     644     529       `
#include "main.h"

/**
 * _memset - fills memory with constant bytes
 *
 * @s: pointer to the memory area to be filled
 * with constant bytes
 *
 * @b: constant byte value to be used to fill memory area s
 *
 * @n: number of bytes to fill with constant bytes b
 *
 * Return: returns a pointer to the original memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
        char *p = s;

        while (n > 0)
        {
                *p = b;
                p++;
                n--;
        }
        return (s);
}

0-strcat.o/     0           0     0     644     542       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 *
 * @dest: the string to be appended
 * @src: the appending string
 *
 * Return: returns the address of dest
 */

char *_strcat(char *dest, char *src)
{
        char *destend;

        destend = dest;

        while (*destend != '\0')
        {
                destend++;
        }

        while (*src != '\0')
        {
                *destend = *src;
                destend++;
                src++;
        }
        *destend = '\0';
        return (dest);
}
1-isdigit.o/    0           0     0     644     270       `
#include "main.h"

/**
 * _isdigit - has an int return type
 *
 * @c: value of character
 *
 * Return: the return value is to be calculated
 */

int _isdigit(int c)
{
        if (c >= 48 && c <= 57)
                return (1);
        else
                return (0);
}
1-memcpy.o/     0           0     0     644     510       `
#include "main.h"

/**
 * _memcpy - function to copy memory area
 *
 * @dest: pointer to the destination memory area where you want
 * to copy the data
 *
 *  @src: pointer to the source memory area from which you want
 *  to copy the data
 *
 *  @n: the number of bytes to copy form the source to the destination
 *
 *  Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
        unsigned int i;

        for (i = 0; i < n; i++)
                dest[i] = src[i];
        return (dest);
}
1-strncat.o/    0           0     0     644     630       `
#include "main.h"

/**
 * _strncat - function that concatenates two strings
 * relative to the minumum number of n bytes
 *
 * @dest: string to be appended
 * @src: appending string
 * @n: they number of bytes
 *
 * Return: function returns the address of dest
 */

char *_strncat(char *dest, char *src, int n)
{
        char *destend;

        destend = dest;

        while (*destend != '\0')
        {
                destend++;
        }

        while (*src != '\0' && n > 0)
        {
                *destend = *src;
                destend++;
                src++;
                n--;
        }
        return (dest);
}
100-atoi.o/     0           0     0     644     648       `
#include "main.h"

/**
 * _atoi - changing string to int
 *
 * @s: the string
 *
 * Return: the value of n1
 */

int _atoi(char *s)
{
        int i, value, sign;
        char c;

        i = 0;
        value = 0;
        sign = -1;
        while (s[i] != '\0')
        {
        c = s[i];
        if (c == '-')
        sign *= -1;
        else if (c >= '0' && c <= '9')
        {
        if (value < 0)
        value = value * 10 - (c - '0');
        else
        value = (c - '0') * -1;
        if (s[i + 1] < '0' || s[i + 1] > '9')
        break;
        }
        i++;
        }
        if (sign < 0)
        value *= -1;

        return (0);
}
2-strchr.o/     0           0     0     644     311       `
#include "main.h"

/**
 * _strchr - entry point
 * @s: input
 * @c: input
 * Return: to be determined
 */

char *_strchr(char *s, char c)
{
        int i;

        for (i = 0; s[i] >= '\0'; i++)
        {
                if (s[i] == c)
                        return (&s[i]);
        }
        return ('\0');
}

2-strlen.o/     0           0     0     644     255       `
#include "main.h"
  
/**
 * _strlen - countig lenght of string
 *
 * Return: c
 *
 * @s: string to be counted
 */

int _strlen(char *s)
{
        int a;
        int c = 0;

        for (a = 0; s[a] != '\0'; a++)
                c++;
        return (c);
}

2-strncpy.o/    0           0     0     644     455       `
#include "main.h"

/**
 * _strncpy - function to copy two string
 *
 * @dest: string to be copied
 * @src: string being copied
 * @n: determines the ammount of characters to be copied
 *
 * Return: the address of dest
 */


char *_strncpy(char *dest, char *src, int n)
{
        int i;

        for (i = 0; i < n && src[i] != '\0'; i++)
                dest[i] = src[i];
        for (; i < n; i++)
                dest[i] = '\0';
        return (dest);
}

3-islower.o/    0           0     0     644     259       `
#include "main.h"

/**
 *_islower - the function is of type int
 *
 *Return: the return value is 0 or 1
 *@c: is to be checked
 */

int _islower(int c)
{
        if (c >= 'a' && c <= 'z')
                return (1);
        else
                return (0);
}

3-puts.o/       0           0     0     644     228       `
#include "main.h"

/**
 * _puts - printing a string
 *
 * @str: string to be printed
 */

void _puts(char *str)
{
        for (; *str != '\0'; str++)
        {
                _putchar(*str);
        }
        _putchar('\n');
}
3-strcmp.o/     0           0     0     644     603       `
#include "main.h"

/**
 * _strcmp - function to compare two srings
 *
 * @s1: first string to be compared
 * @s2: second string to be compared
 *
 * Return: depending on the comparison reults
 */

int _strcmp(char *s1, char *s2)
{
        int i;

        for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
        {
                if (s1[i] != s2[i])
                {
                        if (s1[i] > s2[i])
                                return (s1[i] - s2[i]);
                        else
                                return (s1[i] - s2[i]);
                }
        }

        return (0);
}

3-strspn.o/     0           0     0     644     777       `
#include "main.h"

/**
 * _strspn - getting the lenght of prefix in a string
 *
 * @s: the sting to search for the prefix
 * @accept: string that contains the charachertes to be
 * looked for
 *
 * Return: the lenght of the prefix
 */

unsigned int _strspn(char *s, char *accept)
{
        unsigned int count = 0;
        int i;

        while (*s)
        {
                for (i = 0; accept[i]; i++)
                {
                        if (*s == accept[i])
                        {
                                count++;
                                break;
                        }
                        else if (accept[i + 1] == '\0')
                                return (count);
                }
                s++;
        }
        return (count);
}

4-isalpha.o/    0           0     0     644     287       `
#include "main.h"

/**
 * _isalpha - is of type int
 *
 * Return: the return value is eithe 0 or 1
 *
 * @c: is to be checked
 */

int _isalpha(int c)
{

        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
                return (1);
        else
                return (0);
}

4-strpbrk.o/    0           0     0     644     437       `
#include "main.h"

/**
 * _strpbrk - entry point
 *
 * @s: first input
 *
 * @accept: second input
 *
 * Return: to be determined
 */

char *_strpbrk(char *s, char *accept)
{
        int i;

        while (*s)
        {
                for (i = 0; accept[i]; i++)
                {
                        if (*s == accept[i])
                        return (s);
                }
                s++;
        }
        return ('\0');
}

5-strstr.o/     0           0     0     644     565       `
#include "main.h"

/**
 * _strstr - entry point
 *
 * @haystack: input
 * @needle: input
 *
 * Return: to be determined
 */

char *_strstr(char *haystack, char *needle)
{
        for (; *haystack != '\0'; haystack++)
        {
                char *one = haystack;
                char *two = needle;

                while (*one == *two && *two != '\0')
                {
                        one++;
                        two++;
                }
                if (*two == '\0')
                        return (haystack);
        }
        return ('\0');
}

6-abs.o/        0           0     0     644     264       `
#include "main.h"

/**
 * _abs - function has an int data type
 *
 * Return: return value is abs_val or c
 *
 * @c: to be checked
 */

int _abs(int c)
{
        if (c < 0)
        {
                return (-c);
        }
        else
                return (c);
}
9-strcpy.o/     0           0     0     644     317       `
#include "main.h"

/**
 * _strcpy - copying a string
 *
 * @dest: sting 1
 * @src: string 2
 *
 * Return: dest
 */

char *_strcpy(char *dest, char *src)
{
        int i;

        for (i = 0; src[i] != '\0'; i++)
        {
                dest[i] = src[i];
        }
        dest[i++] = '\0';
        return (dest);
}

_putchar.o/     0           0     0     644     254       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
        return (write(1, &c, 1));
}
